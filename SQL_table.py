import sqlite3

def setup_database():
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    with sqlite3.connect('habits_tracker.db') as conn:
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        ''')

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏–≤—ã—á–µ–∫
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS habits (
            habit_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            type TEXT CHECK(type IN ('custom', 'preset')) DEFAULT 'preset',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        ''')

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_habits (
            user_id INTEGER,
            habit_id INTEGER,
            reminder_frequency TEXT CHECK(reminder_frequency IN ('daily', 'weekly', 'monthly')) NOT NULL,
            PRIMARY KEY (user_id, habit_id),
            FOREIGN KEY (user_id) REFERENCES users(user_id),
            FOREIGN KEY (habit_id) REFERENCES habits(habit_id)
        );
        ''')

        # # –ù–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏–≤—ã—á–µ–∫ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # habits = [("–¢–∞–±–∞–∫–æ–∫—É—Ä–µ–Ω–∏–µ", "üö¨", "bad"), ("–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "ü•ó", "good")]
        # cursor.executemany("INSERT INTO habits (name, description, type) VALUES (?, ?, ?)", habits)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

if __name__ == "__main__":
    setup_database()

def connect_to_db():
    return sqlite3.connect('habits_tracker.db')

def add_or_get_user(telegram_id):
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id) VALUES (?)", (telegram_id,))
    conn.commit()
    cursor.execute("SELECT user_id FROM users WHERE telegram_id = ?", (telegram_id,))
    user_id = cursor.fetchone()[0]
    conn.close()
    return user_id

def add_habit_to_user(user_id, habit_name):
    conn = connect_to_db()
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞
    cursor.execute("SELECT habit_id FROM habits WHERE name = ?", (habit_name,))
    habit_data = cursor.fetchone()
    if habit_data is not None:
        habit_id = habit_data[0]
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cursor.execute("INSERT OR IGNORE INTO user_habits (user_id, habit_id) VALUES (?, ?)", (user_id, habit_id))
        conn.commit()
    conn.close()

def remove_habit_from_user(user_id, habit_name):
    conn = connect_to_db()
    cursor = conn.cursor()
    # –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é
    cursor.execute("SELECT habit_id FROM habits WHERE name = ?", (habit_name,))
    habit_data = cursor.fetchone()
    if habit_data is not None:
        habit_id = habit_data[0]
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM user_habits WHERE user_id = ? AND habit_id = ?", (user_id, habit_id))
        conn.commit()
    conn.close()

def list_user_habits(user_id):
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute("SELECT h.name FROM habits h JOIN user_habits uh ON h.habit_id = uh.habit_id WHERE uh.user_id = ?", (user_id,))
    habits = cursor.fetchall()
    conn.close()
    return [habit[0] for habit in habits]

if __name__ == "__main__":
    # –≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    # –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏: print(list_user_habits(1))
    pass

